@model List<Person>;
@{
    ViewData["Title"] = "Ассемблер";
    Layout = "_Layout";
}
<div class="TextAsembler">
    <h1>Что такое ассемблер и нужно ли его изучать</h1>
    Этому языку уже за 70, но на пенсию он пока не собирается.
    <img src="https://248006.selcdn.ru/main/iblock/41a/41a9a3a905e7442ce5f2f7b489d405bf/8a25ae31c0c6d10803bc850ccdb270c7.png" alt="Тут изображение компьютера">
    <p>
        Есть традиция начинать изучение программирования с вывода на экран строки «Hello world!». На языке Python, например, это всего одна команда:
        <div class="codeAssembler">
            <code>print("Hello, World!")</code>
        </div>
        Всё просто, понятно и красиво! Но есть язык программирования, в котором, чтобы получить тот же результат, нужно написать солидный кусок кода:
        <div class="codeAssembler">
            <pre>
            <code>.MODEL SMALL<br>
        .STACK 100h<br>
        .DATA<br>
            HelloMessage DB <u>'Hello, World!'</u>,13,10,'$'<br>
        .CODE<br>
        START:<br>
            mov ax,data<br>
            mov ds,ax<br>
            mov ah,9<br>
            mov dx,OFFSET HelloMessage<br>
            int 21h<br>
            mov ah,4ch<br>
            int 21h<br>
        END START</code>
    </pre>
        </div>
    </p>
    <p>
        Это ассемблер. Только не нужно думать, что он плох. Просто Python — это язык высокого уровня, а ассемблер — низкого. Одна команда Python при выполнении вызывает сразу несколько операций процессора, а каждая команда ассемблера — всего одну операцию.
        <br><br>
        Сложно? Давайте разбираться.
    </p>
    <h2>Немного о процессорах и машинном языке</h2>
    <p>
        Чтобы объяснить, что такое язык ассемблера, начнём с того, как вообще работает процессор и на каком языке с ним можно «разговаривать».
        <br>
        Процессор — это электронное устройство (сейчас крошечная микросхема, а раньше процессоры занимали целые залы), не понимающее слов и цифр. Он реагирует только на два уровня напряжения: высокий — единица, низкий — ноль. Поэтому каждая процессорная команда — это последовательность нулей и единиц: 1 — есть импульс, 0 — нет.
        <br>
        Для работы с процессором используется машинный язык. Он состоит из инструкций, записанных в двоичном коде. Каждая инструкция определяет одну простую машинную операцию: арифметическую над числами, логическую (поразрядную), ввода-вывода и так далее.
        <br>
        Например, для Intel 8088 инструкция 0000001111000011B — это операция сложения двух чисел, а 0010101111000011B — вычитания.
        <br>
        Программировать на машинном языке нелегко — приходится работать с огромными цепочками нулей и единиц. Трудно написать или проверить такую программу, а уж тем более разобраться в чужом коде.
        <br>
        Поэтому много лет назад был создан язык ассемблера, в котором коды операций обозначались буквами и сокращениями английских слов, отражающих суть команды. Например, команда mov ax, 6 означает: «переместить число 6 в ячейку памяти AX».
    </p>
    <h2>Когда и как был создан ассемблер?</h2>
    <p>
        Это произошло ещё в сороковых годах прошлого века. Ассемблер был создан для первых ЭВМ на электронных лампах, программы для которых писали на машинном языке. А так как памяти у компьютеров было мало, то команды вводили, переключая тумблеры и нажимая кнопки. Даже несложные вычисления занимали много времени.
        <br>
        Проблему решили, когда ЭВМ научились хранить программы в памяти. Уже в 1950 году была разработана первая программа-транслятор, которая переводила в машинный код программы, написанные на понятном человеку языке. Эту программу назвали программой-сборщиком, а язык — языком ассемблера (от англ. assembler — сборщик).
        <br>
        Появление ассемблера сильно облегчило жизнь программистов. Они смогли вместо двоичных кодов использовать команды, состоящие из близких к обычному языку условных обозначений. Кроме того, ассемблер позволил уменьшить размеры программ — для машин того времени это было важно.
    </p>
    <h2>Как устроен язык ассемблера?</h2>
    <p>
        Ассемблер можно считать языком второго поколения, если за первый принять машинный язык. Он работает непосредственно с процессором, и каждая его команда — это инструкция процессора, а не операционной или файловой системы. Перевод языка ассемблера в машинный код называется ассемблированием.
        <br>
        Команды ассемблера состоят из кодов операций и операндов. Операнды — это адреса, из которых процессор будет брать данные для вычислений и в которые будет помещать результат. Адресами могут быть ячейки оперативной памяти и регистры — память внутри процессора. Процессор работает с регистрами гораздо быстрее, чем с оперативной памятью.
        <br>
        Коды операций в языке ассемблера мнемонические, то есть удобные для запоминания:
        <ul style="list-style-image:url(/img/listImage.png);">
            <li> <U> ADD</U> — сложение (от англ. addition);</li>
            <li> <U>SUB</U> — вычитание (от англ. subtraction);</li>
            <li> <U>MUL</U> — умножение (от англ. multiplication) и так далее.</li>
        </ul>
        Регистрам и ячейкам памяти присваиваются символические имена, например:

        <U>EAX</U>, <U>EBX</U>, <U>AX</U>, <U>AH</U> — имена для регистров;

        <U>meml</U> — имя для ячейки памяти.

        Например, так выглядит команда сложения чисел из регистров AX и BX:

        <U>add ax, bx</U>

        А это команда вычитания чисел из регистров AX и BX:

        <U>sub ax, bx</U>

        Кроме инструкций, в языке ассемблера есть директивы — команды управления компилятором, то есть программой-ассемблером.
        Вот некоторые из них:
        <ul style="list-style-image:url(/img/listImage.png);">
            <li><U>INCLUDE</U> — открыть файл и начать его компиляцию;</li>
            <li><U>EXIT</U> — прекратить компиляцию файла;.</li>
            <li><U>DEF</U> — назначить регистру символическое имя и т. д.</li>
        </ul>
        Не думайте, что ассемблер — всего лишь набор инструкций процессора с удобной для программиста записью. Это полноценный язык программирования, на котором можно организовать циклы, условные переходы, процедуры и функции.
    </p>
</div>
<span style="margin-left: 20px; font-size: 45px; color: gray; margin-top: 20px;">Комментарии</span>
@{
    @using (Html.BeginForm("Assembler", "Home"))
    {
        @Html.TextArea("id1",null,new {@class="SpendText", type="text",placeholder="..."})
        ;
        if (User.Identity.IsAuthenticated)
        {
            <input class="Spend" type="submit" value="Отправить">
        }
        else
        {
            <input class="Spend" type="button" onclick="alert('Авторизуйтесь, чтобы оставить комментарий');" value="Отправить">
        }
    }
    @foreach (Person i in Model)
    {
        <div class="CommntUser">
                    <h3>@i.Name</h3>
                    <img src=@i.Photo width="60px" height="60px" alt="">
                    <p>@i.Article</p>
           @if(i.Evaluate==1)
           {
               <img id="evaluate" src="~/img/like.jpg" alt="лайк">
           }
           else
           {
            <img id="evaluate" src="~/img/dislike.jpg" alt="дизлайк">
           }
        </div>
    }
}