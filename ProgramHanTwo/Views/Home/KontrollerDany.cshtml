@model List<Person>;
@{
	ViewData["Title"] = "Составляющие компилятора. Фазы компиляции.";
	Layout = "_Layout";
}

<h2>Основная функциональность и терминология </h2>
<div class="posts_content">

	<p>
		Компилятор — программа, переводящая написанный на языке программирования текст в набор машинных кодов, включающая:
		<img src="/img/comp.jpeg">
		<ul>
		<li>трансляцию всех модулей программы, написанных на одном или нескольких исходных языках программирования высокого уровня и/или языке ассемблера, в эквивалентные программные модули на низкоуровневом языке, близком машинному коду (абсолютный код, объектный модуль, иногда на язык ассемблера)или непосредственно на машинном языке или ином двоичнокодовом низкоуровневом командном языке;</li>
		<li>последующую сборку исполняемой машинной программы, в том числе вставка в программу кода всех функций, импортируемых из статических библиотек и/или генерация кода запроса к ОС на загрузку динамических библиотек, из которых программой функции будут вызываться.</li>
		Если компилятор генерирует исполняемую машинную программу на машинном языке, то такая программа непосредственно исполняется физической программируемой машиной (например компьютером). В других случаях исполняемая машинная программа выполняется соответствующей виртуальной машиной.
		Входная информация для компилятора есть:
		на фазе трансляции: исходный код программы, являющийся описанием алгоритма или программы на предметно-ориентированном языке программирования;
		на фазе компоновки: сгенерированные на фазе трансляции файлы объектных кодов модулей программы, а также файлы объектных кодов статических библиотек и данные об используемых динамических библиотеках.
		На выходе компилятора — эквивалентное описание алгоритма на машинно-ориентированном языке (объектный код, байт-код).
		Компилиировать — проводить сборку машинной программы, включая:
		<li>трансляцию с предметно-ориентированного языка на машинно-ориентированный язык,</li>
		<li>компоновка исполняемой машинно-ориентированной программы из сгенерированных на фазе трансляции объектных модулей — модулей, содержащих части кода программы на машинно-ориентированного кода программы.</li>
		</ul>
	</p>



<hr>
<h2>Виды компиляции</h2>
<div class="posts_content">
	<p>
		<ul>
		<li>Пакетная. Компиляция нескольких исходных модулей в одном задании.</li>
		<li>Построчная. Машинный код порождается и затем исполняется для каждой завершённой грамматической конструкции языка. Внешне воспринимается как интерпретация, но имеет иное устройство.</li>
		<li>Условная. На фазе трансляции результат трансляции зависит от условий, прописанных в исходном транслируемом тексте программы директивами компилятора. (Яркий пример — работа препроцессора языка С и производных от него.) Так, в зависимости от значения некой константы некая транслятор заданную часть транслируемого исходного текста программы транслирует или пропускает (игнорирует).</li>
		</ul>
	</p>
</div>

<hr>
<h2>Структура компилятора</h2>
<div class="posts_content">
	<p>
			<strong>Процесс компиляции состоит из следующих этапов:</strong>
		<ul>
		<li>Пакетная. Компиляция нескольких исходных модулей в одном задании.</li>
		<li>Построчная. Машинный код порождается и затем исполняется для каждой завершённой грамматической конструкции языка. Внешне воспринимается как интерпретация, но имеет иное устройство.</li>
		<li>Условная. На фазе трансляции результат трансляции зависит от условий, прописанных в исходном транслируемом тексте программы директивами компилятора. (Яркий пример — работа препроцессора языка С и производных от него.) Так, в зависимости от значения некой константы некая транслятор заданную часть транслируемого исходного текста программы транслирует или пропускает (игнорирует).</li>
		</ul>
	</p>
</div>
</div>
<span style="margin-left: 20px; font-size: 45px; color: gray; margin-top: 20px;">Комментарии</span>
@{
	@using (Html.BeginForm("KontrollerDany", "Home"))
	{
		@Html.TextArea("id1",null,new {@class="SpendText", type="text",placeholder="..."})
		;
		if (User.Identity.IsAuthenticated)
		{
			<input class="Spend" type="submit" value="Отправить">
		}
		else
		{
			<input class="Spend" type="button" onclick="alert('Авторизуйтесь, чтобы оставить комментарий');" value="Отправить">
		}
	}
	@foreach (Person i in Model)
	{
		<div class="CommntUser">
			<h3>@i.Name</h3>
			<img src=@i.Photo width="60px" height="60px" alt="">
			<p>@i.Article</p>
			 @if(i.Evaluate==1)
           {
               <img id="evaluate" src="~/img/like.jpg" alt="лайк">
           }
           else
           {
            <img id="evaluate" src="~/img/dislike.jpg" alt="дизлайк">
           }
		</div>
	}
}
